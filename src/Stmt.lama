-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval(c@[st, world], stmt) {
  case stmt of
      Assn (name, expr) -> [st <- [name, evalExpr(st, expr)], world]
    | Seq  (stmt1, stmt2) -> eval(eval(c, stmt1), stmt2)
    | Skip -> c
    | Read (name) -> case readWorld(world) of
      [v, newWorld] -> [st <- [name, v], newWorld]
    esac
    | Write (expr) -> [st, writeWorld(evalExpr(st, expr), world)]
    | If (condition, body, next) ->
      if evalExpr(st, condition)
        then eval(c, body)
        else eval(c, next)
      fi
    | While (condition, body) ->
      var conf = c;
      while evalExpr(conf[0], condition) do
        conf := eval(conf, body)
      od;
      conf
    | DoWhile(body, condition) ->
      var conf = c;
      do
        conf := eval(conf, body)
      while evalExpr(conf[0], condition) od;
      conf
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt(input, stmt) {
  eval([emptyState, createWorld(input)], stmt).snd.getOutput
}
