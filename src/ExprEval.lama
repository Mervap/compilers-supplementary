-- Expression evaluator

import Expr;
import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
fun evalOp(op, l, r) {
  case assoc(ops, op) of
    Some (f) -> f(l, r)
  esac
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList(c, exprs) {
  case foldl(
    fun ([c, vals], e) {
      case eval(c, e) of
        [c, v] -> [c, v:vals]
      esac
    },
    [c, {}],
    exprs
  )
  of
    [c, vals] -> [c, reverse(vals)]
  esac
}

fun eval(c@[st, world], expr) {
  case expr of
    Assn (ref, expr) ->
      case evalList(c, { expr, ref }) of
          [c, { value, ElemRef(addr, i) }] -> [c, addr[i] := value]
        | [[st, world], { value, name }] -> [[st <- [name, value], world], value]
      esac
    | Set (to, from) -> eval(c, Assn(Ref(to), from))
    | Seq  (stmt1, stmt2) ->
      case evalList(c, { stmt1, stmt2 }) of
        [c, { _, v }] -> [c, v]
      esac
    | Skip -> [c, {}]
    | Read (name) ->
      case readWorld(world) of
        [v, newWorld] -> [[st <- [name, v], newWorld], Void]
      esac
    | Write (expr) ->
      case eval(c, expr) of
        [[st, world], value] -> [[st, writeWorld(value, world)], Void]
      esac
    | If (condition, thenBranch, elseBranch) ->
      case eval(c, condition) of
          [c, 0] -> eval(c, elseBranch)
        | [c, _] -> eval(c, thenBranch)
      esac
    | While (condition, body) ->
      var conf = c;
      while
        case eval(conf, condition) of
          [c, v] -> conf := c; v
        esac
      do
        conf := eval(conf, body)[0]
      od;
      [conf, Void]
    | DoWhile(body, condition) ->
      var conf = c;
      do
        conf := eval(conf, body)[0]
      while
        case eval(conf, condition) of
          [c, v] -> conf := c; v
        esac
      od;
      [conf, Void]
    | Var (name)  -> [c, st.lookup(name)]
    | Ref (name)  -> [c, name]
    | Const (int) -> [c, int]
    | Binop (opName, l, r) ->
      case evalList(c, { l, r }) of
        [c, { lv, rv }] -> [c, evalOp(opName, lv, rv)]
      esac
    | Ignore (e) -> [eval(c, e)[0], Void]
    | Scope (defs, e)  ->
      case eval([st.enterScope.withDefs(defs), world], e) of
        [[newSt, newWorld], v] -> [[newSt.leaveScope, newWorld], v]
      esac
    | Call (name, args) ->
      var callSt = st;
      case st.lookup(name) of
        Fun(names, body) ->
          case evalList(c, args) of
            [[st, world], values] ->
              case body of
                External ->
                  case evalBuiltin(name, values, world) of
                    [v, newWorld] -> [[st, newWorld], v]
                  esac
                | _      ->
                  case eval([st.enterFunction.withArgs(names, values), world], body) of
                    [[st, world], v] -> [[callSt.leaveFunction(st.getGlobal), world], v]
                  esac
              esac
          esac
      esac
    | String (s)  -> [c, s]
    | Array (arr) ->
      case evalList(c, arr) of
        [c, arr] -> [c, listArray(arr)]
      esac
    | Elem (arr, i) ->
      case evalList(c, { arr, i }) of
        [c, arr : i : {}] -> [c, arr[i]]
      esac
    | Sexp (_, data) ->
      case evalList(c, data) of
        [c, data] -> [c, listArray(data)]
      esac
    | ElemRef (arr, i) ->
      case evalList(c, { arr, i }) of
        [c, arr : i : {}] -> [c, ElemRef(arr, i)]
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr(input, expr) {
  case
    eval(
      [
        emptyState().enterScope
          .addName("read", Fun({}, External))
          .addName("write", Fun({ "a" }, External))
          .addName("length", Fun({ "a" }, External)),
        createWorld(input)
      ],
      expr)
  of
    [c, _] -> c.snd.getOutput
  esac
}
