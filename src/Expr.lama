-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+", infix +],
  ["-", infix -],
  ["*", infix *],
  ["/", infix /],
  ["%", infix %],
  ["==", infix ==],
  ["!=", infix !=],
  ["<", infix <],
  ["<=", infix <=],
  [">", infix >],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp(op, l, r) {
  case assoc(ops, op) of
    Some (f) -> f(l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        Repeat  (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal(state, name) {
  case state.lookup(name) of
    x@Val (_) -> x
    | _       -> error(sprintf("the name ""%s"" does not designate a variable", name), getLoc(name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun(state, name) {
  case state.lookup(name) of
    x@Fun (_, _) -> x
    | _          -> error(sprintf("the name ""%s"" does not designate a function", name), getLoc(name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames(state, names) {
  foldl(fun (s, name) { s.addName(name, Val(0)) }, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction(state, name, args, body) {
  state.addName(name, Fun(args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList(c, exprs) {
  case foldl(
    fun ([c, vals], e) {
      case eval(c, e) of
        [c, vl] -> [c, vl:vals]
      esac
    },
    [c, { }],
    exprs
  ) of
    [c, vals] -> [c, reverse(vals)]
  esac
}

fun eval(c@[st, world], expr) {
  case expr of
    Assn (ref, expr) ->
      case evalList(c, { expr, ref }) of
        [[st, world], { value, name }] -> [[st <- [name, value], world], value]
      esac
    | Seq  (stmt1, stmt2) ->
      case evalList(c, { stmt1, stmt2 }) of
        [c, { _, v }] -> [c, v]
      esac
    | Skip -> [c, {}]
    | Read (name) ->
      case readWorld(world) of
        [v, newWorld] -> [[st <- [name, v], newWorld], Void]
      esac
    | Write (expr) ->
      case eval(c, expr) of
        [[st, world], value] -> [[st, writeWorld(value, world)], Void]
      esac
    | If (condition, thenBranch, elseBranch) ->
      case eval(c, condition) of
          [c, 0] -> eval(c, elseBranch)
        | [c, _] -> eval(c, thenBranch)
      esac
    | While (condition, body) ->
      var conf = c;
      while
        case eval(conf, condition) of
          [c, v] -> conf := c; v
        esac
      do
        conf := eval(conf, body)[0]
      od;
      [conf, Void]
    | DoWhile(body, condition) ->
      var conf = c;
      do
        conf := eval(conf, body)[0]
      while
        case eval(conf, condition) of
          [c, v] -> conf := c; v
        esac
      od;
      [conf, Void]
    | Var (name)  -> [c, st(name)]
    | Ref (name)  -> [c, name]
    | Const (int) -> [c, int]
    | Binop (opName, l, r) ->
      case evalList(c, { l, r }) of
        [c, { lv, rv }] -> [c, evalOp(opName, lv, rv)]
      esac
    | Ignore (e) -> [eval(c, e)[0], Void]
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr(input, expr) {
  case eval([
    emptyState().enterScope
      .addName("read", Fun({ }, External))
    .addName("write", Fun({ "a" }, External))
    .addName("length", Fun({ "a" }, External)), createWorld(input)],
    expr
  ) of
    [c, _] -> c.snd.getOutput
  esac
}
