-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
public ops = {
  ["+", infix +],
  ["-", infix -],
  ["*", infix *],
  ["/", infix /],
  ["%", infix %],
  ["==", infix ==],
  ["!=", infix !=],
  ["<", infix <],
  ["<=", infix <=],
  [">", infix >],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp(op, l, r) {
  case assoc(ops, op) of
    Some (f) -> f(l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        Repeat  (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
public fun lookupExprVal(state, name) {
  case state.lookup(name) of
    x@Val (_) -> x
    | _       -> error(sprintf("the name ""%s"" does not designate a variable", name), getLoc(name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
public fun lookupExprFun(state, name) {
  case state.lookup(name) of
    x@Fun (_, _) -> x
    | _          -> error(sprintf("the name ""%s"" does not designate a function", name), getLoc(name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
public fun addNames(state, names) {
  foldl(fun (s, name) { s.addName(name, Val(0)) }, state, names)
}

-- Helper function: adds a function in current scope
public fun addFunction(state, name, args, body) {
  state.addName(name, Fun(args, body))
}

public fun withDef(st, def) {
  case def of
      Fun(name, args, body) -> st.addFunction(name, args, body)
    | Val(names)            -> st.addNames(names)
    | Var(names)            -> st.addNames(names)
  esac
}

public fun withDefs(st, defs) {
  foldl(withDef, st, defs)
}

public fun withArg(st, [name, value]) {
  st.addName(name, value)
}

public fun withArgs(st, names, values) {
  foldl(withArg, st, zip(names, values))
}

