-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;
import STM;

-- Signals an error; takes an error message and location info
public fun error(msg, loc) {
  failure("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- AST environment
fun createEnv(id) {
  fun freshName() {
    [createEnv(id + 1), sprintf("_tmp%d", id)]
  }

  [freshName]
}

fun emptyEnv() {
  createEnv(0)
}

fun freshName(env) {
  env[0]()
}

-- Attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue(atr, vl, loc) {
  case atr of
      Ref  -> error("reference expected", loc)
    | Void -> vl => fun (vl) { Ignore(vl) }
    | _    -> vl
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid(atr, vl, loc) {
  case atr of
      Void -> vl
    | Val  -> error("value expected", loc)
    | Weak -> vl => fun (vl) { Seq(vl, Const(0)) }
    | _    -> error("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr(l, p, r) {
  syntax (-l p -r)
}

var lParen = s("(");
var rParen = s(")");

-- A helper function to be used with super-combinator "expr"
fun binop(op) {
  [
    syntax (pos -s[op]),
    fun (l, loc, r) {
      fun (a) {
        assertValue(
          a,
          l(Val) =>> fun (l) {
            r(Val) => fun (r) {
              Binop(op, l, r)
            }
          },
          loc
        )
      }
    }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0(item) {
  list0By(item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list(item) {
  listBy(item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope(defs, expr) {
  fun expandVarDefs(defs, expr) {
    foldr(
      fun ([defs, expr], def) {
        case def of
            [ident, None]         -> [ident:defs, expr]
          | [ident, Some (value)] -> [ident:defs, Seq(Ignore(Set(ident, value)), expr)]
        esac
      },
      [{}, expr],
      defs
    )
  }

  fun expandValDefs(defs, expr) {
    foldr(
      fun ([defs, expr], [ident, value]) {
        [ident:defs, Seq(Ignore(Set(ident, value)), expr)]
      },
      [{}, expr],
      defs
    )
  }

  case
    foldr(
      fun ([defs, expr], def) {
        case def of
          f@Fun (_, _, _) -> [f:defs, expr]
          | Val (ds)      ->
            case expandValDefs(ds, expr) of
              [ds, expr] -> [Val(ds):defs, expr]
            esac
          | Var (ds)      ->
            case expandVarDefs(ds, expr) of
              [ds, expr] -> [Var(ds):defs, expr]
            esac
        esac
      },
      [{ }, expr],
      defs
    )
  of
    [defs, expr] -> Scope(defs, expr)
  esac
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope(expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope(defs, exprConstructor(sexpr))
    | _                 -> exprConstructor(expr)
  esac
}

-- Helper AST function: reifies pattern bindings into scope
-- definitions and assignments; takes an returns lists of
-- pattern-branch pairs
fun reifyPatternBindings(matched, brs) {
  map(
    fun ([pat, br]) {
      fun collectBindings(path, p) {
        fun collectList(path, ps) {
          case
            foldl(
              fun ([acc, i], p) {
                [collectBindings(i:path, p):acc, i + 1]
              },
              [{}, 0],
              ps
            ) of
            [acc, _] -> flatten(acc)
          esac
        }

        case p of
            Sexp  (_, ps)   -> collectList(path, ps)
          | Array (ps)      -> collectList(path, ps)
          | Named (name, p) -> [name, path]:collectBindings(path, p)
          | _               -> { }
        esac
      }

      case collectBindings({ }, pat) of
        {}         -> [pat, br]
        | bindings ->
          [pat,
            expandScope(
              {
                Val(
                  map(
                    fun ([name, path]) {
                      [name, foldr(fun (p, i) { Elem(p, Const(i)) }, Var(matched), path)]
                    },
                    bindings
                  )
                )
              },
              br
            )]
      esac
    },
    brs
  )
}


-- else ...
var elseOrSkip = memo $ eta syntax (
  -kElse exp |
  empty {
    fun (a) {
      case a of
        Val -> failure("value expected, but no else branch")
        | _ -> Skip
      esac
    }
  }
);

-- then ... elif ... else ...
var ifBody = memo $ eta syntax (
  condition=basic -kThen body=exp next=elseBody {
    fun (a) {
      If(condition(Val), body(a), next(a))
    }
  }
);

-- elif ... then ... elif ... else ...
var elseBody = memo $ eta syntax (
  -kElif ifBody | elseOrSkip
);

var primary = memo $ eta syntax (
  -- Array constant
  loc=pos x=inbr[s("["), list0(syntax (e=exp { e(Val) })), s("]")] {
    fun (a) { assertValue(a, chainST(x) => fun (x) { Array(x) }, loc) }
  } |

  -- String constant
  loc=pos x=strlit {
    fun (a) { assertValue(a, returnST $ String(x), loc) }
  } |

  -- Character literal
  loc=pos x=chrlit {
    fun (a) { assertValue(a, returnST $ Const(x), loc) }
  } |

  -- Decimal constant
  loc=pos x=decimal {
    fun (a) { assertValue(a, returnST $ Const(stringInt(x)), loc) }
  } |

  -- Identifier
  loc=pos x=lident args=inbr[s("("), list0(syntax(e=exp { e(Val) })), s(")")]? {
    fun (a) {
      case args of
        None          -> returnST $
          case a of
              Ref  -> Ref(x)
            | Void -> Ignore(Var(x))
            | _    -> Var(x)
          esac
        | Some (args) -> assertValue(a, chainST(args) => fun (args) { Call(x, args) }, loc)
      esac }
  } |

  -- S-expression
  loc=pos x=uident args=inbr[s("("), list0(syntax(e=exp { e(Val) })), s(")")]? {
    fun (a) {
      assertValue(
        a,
        case args of
            None        -> returnST $ Sexp(x, {})
          | Some (args) -> chainST(args) => fun (args) { Sexp(x, args) }
        esac,
        loc
      )
    }
  } |

  -- Parethesis
  inbr[lParen, exp, rParen] |

  -- Skip
  loc=pos kSkip {
    fun (a) { assertVoid(a, Skip, loc) }
  } |

  -- Read
  loc=pos kRead name=inbr[lParen, lident, rParen] {
    fun (a) {
      assertVoid(a, Read(name), loc)
    }
  } |

  -- Write
  loc=pos kWrite exp=inbr[lParen, exp, rParen] {
    fun (a) { assertVoid(a, Write(exp(Val)), loc) }
  } |

  -- If
  -kIf ifBody=ifBody -kFi {
    fun (a) {
      ifBody(a)
    }
  } |

  -- While
  loc=pos -kWhile condition=basic -kDo body=exp -kOd {
    fun (a) {
      assertVoid(a, While(condition(Val), body(Void)), loc)
    }
  } |

  -- Repeat
  loc=pos -kDo body=exp -kWhile condition=basic -kOd {
    fun (a) {
      assertVoid(a, DoWhile(body(Void), condition(Val)), loc)
    }
  } |

  -- For
  -kFor
    beforeAll=exp   -s[","]
    condition=basic -s[","]
    afterAll=exp
  -kDo
    body=exp
  -kOd {
    fun (a) {
      var whileRes = While(condition(Val), Seq(body(Void), afterAll(a)));
      Seq(beforeAll(Void), whileRes)
    }
  }
);

var basic = memo $ eta (
  expr(
    {
      [
        Right,
        {
          [
            syntax (pos -s[":="]),
            fun (l, loc, r) {
              fun (a) {
                assertValue(
                  a,
                  l(Ref) =>> fun (l) {
                    r(Val) => fun (r) {
                      Assn(l, r)
                    }
                  },
                  loc
                )
              }
            }
          ]
        }
      ],
      [Left, map(binop, { "!!" })],
      [Left, map(binop, { "&&" })],
      [Nona, map(binop, { "==", "!=", "<", ">", "<=", ">=" })],
      [Left, map(binop, { "+", "-" })],
      [Left, map(binop, { "*", "/", "%" })]
    },
    postfix
  )
);

var postfix = memo $ eta syntax (
  loc=pos e=primary ps=(i=inbr[s("["), exp, s("]")] { Index(i(Val)) })* {
    fun (a) {
      foldl(
        fun (e, p) {
          case p of
            Index (i) ->
              fun (a) {
                case a of
                  Ref -> e(Val) =>> fun (e) {
                    i => fun (i) {
                      ElemRef(e, i)
                    }
                  }
                  | _ -> assertValue(
                    a,
                    e(Val) =>> fun (e) {
                      i => fun (i) {
                        Elem(e, i)
                      }
                    },
                    loc
                  )
                esac
              }
          esac
        },
        e,
        ps
      )(a)
    }
  }
);

var scopeExpr = memo $ eta syntax (
  ds=definition* e=exp? {
    fun (a) {
      fun (e) {
        case ds of
          { } -> e
          | _ -> chainST(ds) =>> fun (ds) {
            e => fun (e)  {
              expandScope(ds, e)
            } }
        esac
      }(
        case e of
          Some (e) -> e(a)
          | _      -> returnST $ Skip
        esac
      )
    }
  }
);

var definition = memo $ eta syntax (
  kVar ds=list[syntax (x=lident e=(-s["="] basic)? {
    case e of
        None     -> returnST $ [x, None]
      | Some (e) -> e(Val) => fun (e) { [x, Some(e)] }
    esac
  })] s[";"] {
    chainST(ds) => fun (ds) { Var(ds) }
  } |
  kVal ds=list[syntax (x=lident s["="] e=basic { e(Val) => fun (e) { [x, e] } })] s[";"] {
    chainST(ds) => fun (ds) { Val(ds) }
  } |
  kFun name=lident args=inbr[s("("), list0(lident), s(")")] body=inbr[s("{"), scopeExpr, s("}")] {
    body(Weak) => fun (body) { Fun(name, args, body) }
  }
);

var exp = memo $ eta syntax (
  basic |
  s1=basic s[";"] s2=exp {
    fun (a) {
      s1(Void) =>> fun (s1) {
        s2(a) => fun (s2) {
          Seq(s1, s2)
        }
      }
    }
  }
);

-- Public top-level parser
public parse = syntax (s=scopeExpr { s(Void)(emptyEnv())[1] });
