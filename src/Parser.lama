-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error(msg, loc) {
  failure("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue(atr, vl, loc) {
  case atr of
      Ref  -> error("reference expected", loc)
    | Void -> Ignore(vl)
    | _    -> vl
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid(atr, vl, loc) {
  case atr of
      Void -> vl
    | Val  -> error("value expected", loc)
    | Weak -> Seq(vl, Const(0))
    | _    -> error("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr(l, p, r) {
  syntax (-l p -r)
}

var lParen = s("(");
var rParen = s(")");

-- A helper function to be used with super-combinator "expr"
fun binop(op) {
  [
    syntax (pos -s[op]),
    fun (l, loc, r) {
      fun (a) {
        assertValue(a, Binop(op, l(Val), r(Val)), loc)
      }
    }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0(item) {
  list0By(item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list(item) {
  listBy(item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope(defs, expr) {
  fun expandVarDefs(defs, expr) {
    foldr(
      fun ([defs, expr], def) {
        case def of
            [ident, None]         -> [ident:defs, expr]
          | [ident, Some (value)] -> [ident:defs, Seq(Ignore(Set(ident, value)), expr)]
        esac
      },
      [{}, expr],
      defs
    )
  }

  fun expandValDefs(defs, expr) {
    foldr(
      fun ([defs, expr], [ident, value]) {
        [ident:defs, Seq(Ignore(Set(ident, value)), expr)]
      },
      [{}, expr],
      defs
    )
  }

  case
    foldr(
      fun ([defs, expr], def) {
        case def of
          f@Fun (_, _, _) -> [f:defs, expr]
          | Val (ds)      ->
            case expandValDefs(ds, expr) of
              [ds, expr] -> [Val(ds):defs, expr]
            esac
          | Var (ds)      ->
            case expandVarDefs(ds, expr) of
              [ds, expr] -> [Var(ds):defs, expr]
            esac
        esac
      },
      [{}, expr],
      defs
    )
  of
    [defs, expr] -> Scope(defs, expr)
  esac
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope(expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope(defs, exprConstructor(sexpr))
    | _                 -> exprConstructor(expr)
  esac
}


-- else ...
var elseOrSkip = memo $ eta syntax (
  -kElse scopeExpr |
  loc=pos empty {
    fun (a) {
      assertVoid(a, Skip, loc)
    }
  }
);

-- then ... elif ... else ...
var ifBody = memo $ eta syntax (
  condition=basic -kThen body=scopeExpr next=elseBody {
    fun (a) {
      If(condition(Val), body(a), next(a))
    }
  }
);

-- elif ... then ... elif ... else ...
var elseBody = memo $ eta syntax (
  -kElif ifBody | elseOrSkip
);

var primary = memo $ eta syntax (
  -- Array constant
  loc=pos x=inbr[s("["), list0(syntax (e=exp { e(Val) })), s("]")] { fun (a) { assertValue(a, Array(x), loc) } } |

  -- String constant
  loc=pos x=strlit { fun (a) { assertValue(a, String(x), loc) } }                                                |

  -- Character literal
  loc=pos x=chrlit { fun (a) { assertValue(a, Const(x), loc) } }                                                 |

  -- Decimal constant
  loc=pos x=decimal { fun (a) { assertValue(a, Const(stringInt(x)), loc) } }                                     |

  -- Function call
  loc=pos name=lident args=inbr[lParen, list0(arg), rParen] {
    fun (a) {
      assertValue(a, Call(name, args), loc)
    }
  } |

  -- Identifier
  x=lident args=inbr[s("("), list0(syntax(e=exp { e(Val) })), s(")")]? {
    fun (a) {
      case args of
        None          ->
          case a of
              Ref  -> Ref(x)
            | Void -> Ignore(Var(x))
            | _    -> Var(x)
          esac
        | Some (args) -> assertValue(a, Call(x, args))
      esac
    }
  }  |

  -- S-expression
  loc=pos x=uident args=inbr[s("("), list0(syntax(e=exp { e(Val) })), s(")")]? {
    fun (a) {
      assertValue(
        a,
        Sexp(
          x,
          case args of
              None        -> {}
            | Some (args) -> args
          esac
        ),
        loc
      )
    }
  } |

  -- Parethesis
  inbr[lParen, scopeExpr, rParen] |

  -- Skip
  loc=pos kSkip {
    fun (a) { assertVoid(a, Skip, loc) }
  } |

  -- if
  -kIf ifBody=ifBody -kFi {
    fun (a) {
      ifBody(a)
    }
  } |

  -- While
  loc=pos -kWhile condition=basic -kDo body=scopeExpr -kOd {
    fun (a) {
      assertVoid(a, While(condition(Val), body(Void)), loc)
    }
  } |

  -- Repeat
  loc=pos -kDo body=scopeExpr -kWhile condition=basic -kOd {
    fun (a) {
      distributeScope(
        body(Void),
        fun (loopBody) {
          assertVoid(a, DoWhile(loopBody, condition(Val)), loc)
        }
      )
    }
  } |

  -- For
  -kFor
    beforeAll=scopeExpr -s[","]
    condition=basic     -s[","]
    afterAll=exp
  -kDo
    body=scopeExpr
  -kOd {
    fun (a) {
      var whileRes = While(condition(Val), Seq(body(Void), afterAll(a)));
      distributeScope(
        beforeAll(Void),
        fun (initPart) {
          assertVoid(a, Seq(initPart, whileRes), loc)
        }
      )
    }
  }
);

var arg = memo $ eta syntax(arg=exp { arg(Val) });

var basic = memo $ eta (
  expr(
    {
      [
        Right,
        {
          [
            syntax (pos -s[":="]),
            fun (l, loc, r) {
              fun (a) { assertValue(a, Assn(l(Ref), r(Val)), loc) }
            }
          ]
        }
      ],
      [Left, map(binop, { "!!" })],
      [Left, map(binop, { "&&" })],
      [Nona, map(binop, { "==", "!=", "<", ">", "<=", ">=" })],
      [Left, map(binop, { "+", "-" })],
      [Left, map(binop, { "*", "/", "%" })]
    },
    postfix
  )
);
var postfix = memo $ eta syntax (
  loc=pos e=primary ps=(i=inbr[s("["), exp, s("]")] { Index(i(Val)) })* {
    fun (a) {
      foldl(
        fun (e, p) {
          case p of
            Index (i) ->
              fun (a) {
                case a of
                  Ref -> ElemRef(e(Val), i)
                  | _ -> assertValue(a, Elem(e(Val), i), loc)
                esac
              }
          esac
        },
        e, ps
      )(a)
    }
  }
);

var scopeExpr = memo $ eta syntax (
  ds=definition* e=exp? {
    fun (a) {
      fun (e) {
        case ds of
          {}  -> e
          | _ -> expandScope(ds, e)
        esac
      }(
        case e of
          Some (e) -> e(a)
          | _      -> Skip
        esac)
    }
  }
);

var definition = memo $ eta syntax (
  kVar ds=list[syntax (lident (s["="] e=basic { e(Val) })?)] s[";"] { Var(ds) } |
  kVal ds=list[syntax (lident (s["="] e=basic { e(Val) }))]  s[";"] { Val(ds) } |
  kFun name=lident
    args=inbr[s("("), list0(lident), s(")")]
    body=inbr[s("{"), scopeExpr, s("}")] {
    Fun(name, args, body(Weak))
  }
);
var exp = memo $ eta syntax (
  basic |
  s1=basic s[";"] s2=exp {
    fun (a) {
      Seq(s1(Void), s2(a))
    }
  }
);

-- Public top-level parser
public parse = syntax (s=scopeExpr { s(Void) });
