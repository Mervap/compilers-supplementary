-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error(msg, loc) {
  failure("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue(atr, v, loc) {
  case atr of
      Ref  -> error("reference expected", loc)
    | Void -> Ignore(v)
    | _    -> v
  esac
}

fun assertVoid(atr, v, loc) {
  case atr of
      Void -> v
    | Val  -> error("value expected", loc)
    | _    -> error("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr(l, p, r) {
  syntax (-l p -r)
}

var lParen = s("(");
var rParen = s(")");

fun binop(op) {
  [
    syntax (pos -s[op]),
    fun (l, loc, r) {
      fun (a) {
        assertValue(a, Binop(op, l(Val), r(Val)), loc)
      }
    }
  ]
}

var primary = memo $ eta syntax (
  -- decimal constant
  loc = pos x = decimal { fun (a) { assertValue(a, Const(stringInt(x)), loc) } } |

  -- identifier
  x = lident {
    fun (a) {
      case a of
        Ref -> Ref(x)
        | Void -> Ignore(Var(x))
        | _ -> Var(x)
      esac
    }
  } |
  $(failure("the rest of primary parsing in not implemented\n"))
);

var basic = memo $ eta (
  expr(
    {
      [
        Right,
        {
          [
            s(":="),
            fun (l, loc, r) {
              fun (a) { assertValue(a, Assn(l(Ref), r(Val)), loc) }
            }
          ]
        }
      ],
      [Left, map(binop, { "!!" })],
      [Left, map(binop, { "&&" })],
      [Nona, map(binop, { "==", "!=", "<", ">", "<=", ">=" })],
      [Left, map(binop, { "+", "-" })],
      [Left, map(binop, { "*", "/", "%" })]
    },
    primary
  )
);

var exp = memo $ eta syntax (basic | s1 = basic s[";"] s2 = exp { fun (a) { Seq(s1(Void), s2(a)) } });

var elseOrSkip = memo $ eta syntax (
  -kElse stmt_seq | empty { Skip }
);

var thenStmt = memo $ eta syntax (
  condition=exp -kThen body=stmt_seq next=elseStmt { If(condition, body, next) }
);

var elseStmt = memo $ eta syntax (
  -kElif thenStmt | elseOrSkip
);

var stmt = memo $ eta syntax (
  kSkip                                     { Skip }                         |
  kRead name=inbr[lParen, lident, rParen]   { Read(name) }                   |
  kWrite exp=inbr[lParen, exp, rParen]      { Write(exp) }                   |
  name=lident -s[":="] value=exp            { Assn(name, value) }            |
  -kIf thenStmt -kFi                                                         |
  -kWhile condition=exp -kDo body=stmt_seq -kOd { While(condition, body) }   |
  -kDo body=stmt_seq -kWhile condition=exp -kOd { DoWhile(body, condition) } |
  -kFor beforeAll=stmt_seq -s[","]
  condition=exp      -s[","]
  afterAll=stmt_seq  -kDo
  body=stmt_seq
  -kOd {
  Seq(beforeAll, While(condition, Seq(body, afterAll)))
  }
);

var stmt_seq = memo $ eta syntax (
  l = stmt_seq -s[";"] r = stmt { Seq(l, r) } |
  stmt
);

-- Public top-level parser
public parse = stmt_seq;
