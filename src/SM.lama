-- Stack machine.

import Ref;
import Data;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
-- Shows a location (a reference to function argument, local or global variable)
  fun showLoc(d) {
    fun varity(f) {
      if f then "var" else "val" fi
    }

    case d of
        Arg (i) -> sprintf("arg[%d]", i)
      | Loc (i) -> sprintf("loc[%d]", i)
      | Glb (x) -> sprintf("%s", x)
    esac
  }

  case i of
      BINOP  (s)       -> sprintf("BINOP %s", s)
    | LD     (x)       -> sprintf("LD %s", showLoc(x))
    | LDA    (x)       -> sprintf("LDA %s", showLoc(x))
    | ST     (x)       -> sprintf("ST %s", showLoc(x))
    | STI              -> "STI"
    | SEXP   (s, n)    -> sprintf("SEXP ""%s"", %d", s, n)
    | CONST  (n)       -> sprintf("CONST %d", n)
    | LABEL  (s)       -> sprintf("LABEL %s", s)
    | JMP    (l)       -> sprintf("JMP %s", l)
    | CJMP   (c, l)    -> sprintf("CJMP %s, %s", c, l)
    | CALL   (f, n)    -> sprintf("CALL %s, %d", f, n)
    | BEGIN  (f, a, l) -> sprintf("BEGIN %s, %d, %d", f, a, l)
    | GLOBAL (x)       -> sprintf("GLOBAL %s", x)
    | END              -> sprintf("END")
    | DUP              -> "DUP"
    | DROP             -> "DROP"
    | STRING (s)       -> sprintf("STRING ""%s""", s)
    | ARRAY  (n)       -> sprintf("ARRAY %d", n)
    | STA              -> "STA"
    | ELEM             -> "ELEM"
    | BUILTIN (f, n)   -> sprintf("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM(prg) {
  map(fun (i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
public fun initEvalEnv(insns) {
  var map =
    fix(
      fun (rec) {
        fun ([m, insns]) {
          case insns of
            {}                 -> m
            | LABEL (lab) : tl -> rec([addMap(m, lab, insns), tl])
            | _ : tl           -> rec([m, tl])
          esac
        }
      }
    ) $ [emptyMap(compare), insns];

  [
    fun (l) {
      case findMap(map, l) of Some (insns) -> insns esac
    }
  ]
}

-- Accessor function
public fun fromLabel(env, lab) {
  env[0](lab)
}

-- Compilation environment: generates labels
public fun makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel() {
    [sprintf("L%d", nLabels), makeCompEnv(nLabels + 1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun(fLabel, args, body) {
    makeCompEnv(
      nLabels,
      scopeDepth,
      state,
      nLocals,
      nArgs,
      Fun(fLabel, args, body, state):functions
    )
  }

  -- Enters a local scope
  fun beginScope() {
    makeCompEnv(nLabels, scopeDepth + 1, enterScope(state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope() {
    makeCompEnv(nLabels, scopeDepth - 1, leaveScope(state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg(name) {
    makeCompEnv(nLabels, scopeDepth, addName(state, name, Arg(nArgs)), nLocals, nArgs + 1, functions)
  }

  -- Adds a variable in the scope
  fun addVar(name) {
    if isGlobal()
      then makeCompEnv(nLabels, scopeDepth, addName(state, name, Glb(name, true)), nLocals, nArgs, functions)
      else makeCompEnv(nLabels, scopeDepth, addName(state, name, Loc(nLocals, true)), nLocals + 1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal(name) {
    if isGlobal()
      then makeCompEnv(nLabels, scopeDepth, addName(state, name, Glb(name, false)), nLocals, nArgs, functions)
      else makeCompEnv(nLabels, scopeDepth, addName(state, name, Loc(nLocals, false)), nLocals + 1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun(name, fLabel, nargs) {
    makeCompEnv(nLabels, scopeDepth, addName(state, name, Fun(fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun(state) {
    makeCompEnv(nLabels, 2, enterFunction(state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns() {
    [functions, makeCompEnv(nLabels, scopeDepth, state, nArgs, nLocals, { })]
  }

  -- Lookups variable
  fun lookupVar(name) {
    case lookup(state, name) of
        Loc (i, true) -> Loc(i)
      | Glb (x, true) -> Glb(x)
      | _             -> error(sprintf("the name ""%s"" does not designate a variable", name), getLoc(name))
    esac
  }

  -- Lookups value
  fun lookupVal(name) {
    case lookup(state, name) of
        Loc (i, _) -> Loc(i)
      | Glb (x, _) -> Glb(x)
      | Arg (i)    -> Arg(i)
      | _          -> error(sprintf("the name ""%s"" does not designate a value", name), getLoc(name))
    esac
  }

  -- Lookups a name of a function
  fun lookupFun(name) {
    case lookup(state, name) of
      x@Fun (_, _) -> x
      | _          -> error(sprintf("the name ""%s"" does not designate a function", name), getLoc(name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals() {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel(name) {
    if isGlobal()
      then [sprintf("L%s", name), makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, functions)]
      else [sprintf("L%s_%d", name, nLabels), makeCompEnv(nLabels + 1, scopeDepth, state, nLocals, nArgs, functions)]
    fi
  }

  -- Checks if the current scope is a global
  fun isGlobal() {
    scopeDepth == 2
  }

  [genLabel,
    rememberFun,
    beginScope,
    endScope,
    addArg,
    addVar,
    addVal,
    beginFun,
    getFuns,
    lookupVar,
    lookupVal,
    lookupFun,
    getLocals,
    genFunLabel,
    addFun,
    isGlobal
  ]
}

-- Initialize a new compilation environment
public fun initCompEnv() {
  makeCompEnv(0, 0, emptyState(), 0, 0, {})
}

-- Accessor functions
public fun genLabel(env) {
  env[0]()
}

public fun rememberFun(env, name, args, body) {
  env[1](name, args, body)
}

public fun beginScope(env) {
  env[2]()
}

public fun endScope(env) {
  env[3]()
}

public fun addArg(env, name) {
  env[4](name)
}

public fun addVar(env, name) {
  env[5](name)
}

fun addVal(env, name) {
  env[6](name)
}

fun beginFun(env, state) {
  env[7](state)
}

public fun getFuns(env) {
  env[8]()
}

fun lookupVar(env, name) {
  env[9](name)
}

public fun lookupVal(env, name) {
  env[10](name)
}

fun lookupFun(env, name) {
  env[11](name)
}

fun getLocals(env) {
  env[12]()
}

public fun genFunLabel(env, name) {
  env[13](name)
}

public fun addFun(env, name, fLabel, nargs) {
  env[14](name, fLabel, nargs)
}

public fun isGlobal(env) {
  env[15]()
}

-- Helper function: generates n labels
public fun genLabels(env, n) {
  fun inner(env, n) {
    if n == 0
      then { env }
      else
        case genLabel(env) of
          [lab, env] -> lab:inner(env, n - 1)
        esac
    fi
  }

  listArray(inner(env, n))
}

-- Helper function: adds a bunch of arguments
public fun addArgs(env, names) {
  foldl(fun (env, name) { addArg(env, name) }, env, names)
}

-- Helper function: adds a bunch of local variables
public fun addVars(env, names) {
  foldl(fun (env, name) { addVar(env, name) }, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals(env, names) {
  foldl(fun (env, name) { addVal(env, name) }, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun addDef([env, funcs, globals], def) {
  case def of
    Fun (name, args, body) ->
      case env.genFunLabel(name) of
        [label, env] -> [env.addFun(name, label, args.size), Fun(label, args, body):funcs, globals]
      esac
    | Var (names) ->
      var newGlobals = if env.isGlobal
        then globals <+> map(fun (name) { GLOBAL (name) }, names).listBuffer
        else emptyBuffer()
      fi;
      [env.addVars(names), funcs, globals <+> newGlobals]
  esac
}

public fun addDefs(env, defs) {
  foldl(addDef, [env, {}, emptyBuffer()], defs)
}

public fun registerFunc(env, func) {
  case func of
    Fun (label, args, body) -> env.rememberFun(label, args, body)
  esac
}

public fun registerFuncs(env, funcs) {
  foldl(registerFunc, env, funcs)
}

